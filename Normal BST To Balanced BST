void inorder(TreeNode<int>* root, vector<int>&in)
{
    if(root==NULL) return;
    
    inorder(root->left, in);
    in.push_back(root->data);
    inorder(root->right, in);
}
TreeNode<int>* inordertobst(vector<int>&in, int s, int e)
{
    if(s>e) return NULL;
    
    int mid=(s+e)/2;
    TreeNode<int>* root=new TreeNode<int>(in[mid]);
    root->left=inordertobst(in, s, mid-1);
    root->right=inordertobst(in, mid+1, e);
    return root;
}
TreeNode<int>* balancedBst(TreeNode<int>* root) {
    // Write your code here.
    vector<int>inorderval;
    inorder(root, inorderval);
    return inordertobst(inorderval, 0, inorderval.size()-1); 
}
